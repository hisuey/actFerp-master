<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.hups.produce.dao.BillProduceQuoteBMapper" >
  <resultMap id="BaseResultMap" type="cn.hups.produce.entity.BillProduceQuoteB" >
    <constructor >
      <idArg column="pk_produce_quote_b" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="pk_produce_quote_h" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="ismodel" jdbcType="CHAR" javaType="java.lang.String" />
      <arg column="type" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="param" jdbcType="DOUBLE" javaType="java.lang.Double" />
      <arg column="unit_price_out" jdbcType="DOUBLE" javaType="java.lang.Double" />
      <arg column="unit_total_price_out" jdbcType="DOUBLE" javaType="java.lang.Double" />
      <arg column="unit_total_out" jdbcType="DOUBLE" javaType="java.lang.Double" />
      <arg column="memo" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="dr" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="ts" jdbcType="CHAR" javaType="java.lang.String" />
      <arg column="unit_price_sale" jdbcType="DOUBLE" javaType="java.lang.Double" />
      <arg column="unit_total_price_sale" jdbcType="DOUBLE" javaType="java.lang.Double" />
      <arg column="unit_total_sale" jdbcType="DOUBLE" javaType="java.lang.Double" />
    </constructor>
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    pk_produce_quote_b, pk_produce_quote_h, ismodel, type, param, unit_price_out, unit_total_price_out, 
    unit_total_out, memo, dr, ts, unit_price_sale, unit_total_price_sale, unit_total_sale
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="cn.hups.produce.entity.BillProduceQuoteBExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from bill_produce_quote_b
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from bill_produce_quote_b
    where pk_produce_quote_b = #{pkProduceQuoteB,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from bill_produce_quote_b
    where pk_produce_quote_b = #{pkProduceQuoteB,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="cn.hups.produce.entity.BillProduceQuoteBExample" >
    delete from bill_produce_quote_b
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.hups.produce.entity.BillProduceQuoteB" >
    insert into bill_produce_quote_b (pk_produce_quote_b, pk_produce_quote_h, 
      ismodel, type, param, unit_price_out, 
      unit_total_price_out, unit_total_out, memo, 
      dr, ts, unit_price_sale, 
      unit_total_price_sale, unit_total_sale)
    values (#{pkProduceQuoteB,jdbcType=INTEGER}, #{pkProduceQuoteH,jdbcType=INTEGER}, 
      #{ismodel,jdbcType=CHAR}, #{type,jdbcType=VARCHAR}, #{param,jdbcType=DOUBLE}, #{unitPriceOut,jdbcType=DOUBLE}, 
      #{unitTotalPriceOut,jdbcType=DOUBLE}, #{unitTotalOut,jdbcType=DOUBLE}, #{memo,jdbcType=VARCHAR}, 
      #{dr,jdbcType=INTEGER}, #{ts,jdbcType=CHAR}, #{unitPriceSale,jdbcType=DOUBLE}, 
      #{unitTotalPriceSale,jdbcType=DOUBLE}, #{unitTotalSale,jdbcType=DOUBLE})
  </insert>
  <insert id="insertSelective" parameterType="cn.hups.produce.entity.BillProduceQuoteB" >
    insert into bill_produce_quote_b
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="pkProduceQuoteB != null" >
        pk_produce_quote_b,
      </if>
      <if test="pkProduceQuoteH != null" >
        pk_produce_quote_h,
      </if>
      <if test="ismodel != null" >
        ismodel,
      </if>
      <if test="type != null" >
        type,
      </if>
      <if test="param != null" >
        param,
      </if>
      <if test="unitPriceOut != null" >
        unit_price_out,
      </if>
      <if test="unitTotalPriceOut != null" >
        unit_total_price_out,
      </if>
      <if test="unitTotalOut != null" >
        unit_total_out,
      </if>
      <if test="memo != null" >
        memo,
      </if>
      <if test="dr != null" >
        dr,
      </if>
      <if test="ts != null" >
        ts,
      </if>
      <if test="unitPriceSale != null" >
        unit_price_sale,
      </if>
      <if test="unitTotalPriceSale != null" >
        unit_total_price_sale,
      </if>
      <if test="unitTotalSale != null" >
        unit_total_sale,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="pkProduceQuoteB != null" >
        #{pkProduceQuoteB,jdbcType=INTEGER},
      </if>
      <if test="pkProduceQuoteH != null" >
        #{pkProduceQuoteH,jdbcType=INTEGER},
      </if>
      <if test="ismodel != null" >
        #{ismodel,jdbcType=CHAR},
      </if>
      <if test="type != null" >
        #{type,jdbcType=VARCHAR},
      </if>
      <if test="param != null" >
        #{param,jdbcType=DOUBLE},
      </if>
      <if test="unitPriceOut != null" >
        #{unitPriceOut,jdbcType=DOUBLE},
      </if>
      <if test="unitTotalPriceOut != null" >
        #{unitTotalPriceOut,jdbcType=DOUBLE},
      </if>
      <if test="unitTotalOut != null" >
        #{unitTotalOut,jdbcType=DOUBLE},
      </if>
      <if test="memo != null" >
        #{memo,jdbcType=VARCHAR},
      </if>
      <if test="dr != null" >
        #{dr,jdbcType=INTEGER},
      </if>
      <if test="ts != null" >
        #{ts,jdbcType=CHAR},
      </if>
      <if test="unitPriceSale != null" >
        #{unitPriceSale,jdbcType=DOUBLE},
      </if>
      <if test="unitTotalPriceSale != null" >
        #{unitTotalPriceSale,jdbcType=DOUBLE},
      </if>
      <if test="unitTotalSale != null" >
        #{unitTotalSale,jdbcType=DOUBLE},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.hups.produce.entity.BillProduceQuoteBExample" resultType="java.lang.Integer" >
    select count(*) from bill_produce_quote_b
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update bill_produce_quote_b
    <set >
      <if test="record.pkProduceQuoteB != null" >
        pk_produce_quote_b = #{record.pkProduceQuoteB,jdbcType=INTEGER},
      </if>
      <if test="record.pkProduceQuoteH != null" >
        pk_produce_quote_h = #{record.pkProduceQuoteH,jdbcType=INTEGER},
      </if>
      <if test="record.ismodel != null" >
        ismodel = #{record.ismodel,jdbcType=CHAR},
      </if>
      <if test="record.type != null" >
        type = #{record.type,jdbcType=VARCHAR},
      </if>
      <if test="record.param != null" >
        param = #{record.param,jdbcType=DOUBLE},
      </if>
      <if test="record.unitPriceOut != null" >
        unit_price_out = #{record.unitPriceOut,jdbcType=DOUBLE},
      </if>
      <if test="record.unitTotalPriceOut != null" >
        unit_total_price_out = #{record.unitTotalPriceOut,jdbcType=DOUBLE},
      </if>
      <if test="record.unitTotalOut != null" >
        unit_total_out = #{record.unitTotalOut,jdbcType=DOUBLE},
      </if>
      <if test="record.memo != null" >
        memo = #{record.memo,jdbcType=VARCHAR},
      </if>
      <if test="record.dr != null" >
        dr = #{record.dr,jdbcType=INTEGER},
      </if>
      <if test="record.ts != null" >
        ts = #{record.ts,jdbcType=CHAR},
      </if>
      <if test="record.unitPriceSale != null" >
        unit_price_sale = #{record.unitPriceSale,jdbcType=DOUBLE},
      </if>
      <if test="record.unitTotalPriceSale != null" >
        unit_total_price_sale = #{record.unitTotalPriceSale,jdbcType=DOUBLE},
      </if>
      <if test="record.unitTotalSale != null" >
        unit_total_sale = #{record.unitTotalSale,jdbcType=DOUBLE},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update bill_produce_quote_b
    set pk_produce_quote_b = #{record.pkProduceQuoteB,jdbcType=INTEGER},
      pk_produce_quote_h = #{record.pkProduceQuoteH,jdbcType=INTEGER},
      ismodel = #{record.ismodel,jdbcType=CHAR},
      type = #{record.type,jdbcType=VARCHAR},
      param = #{record.param,jdbcType=DOUBLE},
      unit_price_out = #{record.unitPriceOut,jdbcType=DOUBLE},
      unit_total_price_out = #{record.unitTotalPriceOut,jdbcType=DOUBLE},
      unit_total_out = #{record.unitTotalOut,jdbcType=DOUBLE},
      memo = #{record.memo,jdbcType=VARCHAR},
      dr = #{record.dr,jdbcType=INTEGER},
      ts = #{record.ts,jdbcType=CHAR},
      unit_price_sale = #{record.unitPriceSale,jdbcType=DOUBLE},
      unit_total_price_sale = #{record.unitTotalPriceSale,jdbcType=DOUBLE},
      unit_total_sale = #{record.unitTotalSale,jdbcType=DOUBLE}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.hups.produce.entity.BillProduceQuoteB" >
    update bill_produce_quote_b
    <set >
      <if test="pkProduceQuoteH != null" >
        pk_produce_quote_h = #{pkProduceQuoteH,jdbcType=INTEGER},
      </if>
      <if test="ismodel != null" >
        ismodel = #{ismodel,jdbcType=CHAR},
      </if>
      <if test="type != null" >
        type = #{type,jdbcType=VARCHAR},
      </if>
      <if test="param != null" >
        param = #{param,jdbcType=DOUBLE},
      </if>
      <if test="unitPriceOut != null" >
        unit_price_out = #{unitPriceOut,jdbcType=DOUBLE},
      </if>
      <if test="unitTotalPriceOut != null" >
        unit_total_price_out = #{unitTotalPriceOut,jdbcType=DOUBLE},
      </if>
      <if test="unitTotalOut != null" >
        unit_total_out = #{unitTotalOut,jdbcType=DOUBLE},
      </if>
      <if test="memo != null" >
        memo = #{memo,jdbcType=VARCHAR},
      </if>
      <if test="dr != null" >
        dr = #{dr,jdbcType=INTEGER},
      </if>
      <if test="ts != null" >
        ts = #{ts,jdbcType=CHAR},
      </if>
      <if test="unitPriceSale != null" >
        unit_price_sale = #{unitPriceSale,jdbcType=DOUBLE},
      </if>
      <if test="unitTotalPriceSale != null" >
        unit_total_price_sale = #{unitTotalPriceSale,jdbcType=DOUBLE},
      </if>
      <if test="unitTotalSale != null" >
        unit_total_sale = #{unitTotalSale,jdbcType=DOUBLE},
      </if>
    </set>
    where pk_produce_quote_b = #{pkProduceQuoteB,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.hups.produce.entity.BillProduceQuoteB" >
    update bill_produce_quote_b
    set pk_produce_quote_h = #{pkProduceQuoteH,jdbcType=INTEGER},
      ismodel = #{ismodel,jdbcType=CHAR},
      type = #{type,jdbcType=VARCHAR},
      param = #{param,jdbcType=DOUBLE},
      unit_price_out = #{unitPriceOut,jdbcType=DOUBLE},
      unit_total_price_out = #{unitTotalPriceOut,jdbcType=DOUBLE},
      unit_total_out = #{unitTotalOut,jdbcType=DOUBLE},
      memo = #{memo,jdbcType=VARCHAR},
      dr = #{dr,jdbcType=INTEGER},
      ts = #{ts,jdbcType=CHAR},
      unit_price_sale = #{unitPriceSale,jdbcType=DOUBLE},
      unit_total_price_sale = #{unitTotalPriceSale,jdbcType=DOUBLE},
      unit_total_sale = #{unitTotalSale,jdbcType=DOUBLE}
    where pk_produce_quote_b = #{pkProduceQuoteB,jdbcType=INTEGER}
  </update>
</mapper>